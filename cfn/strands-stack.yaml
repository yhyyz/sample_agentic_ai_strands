AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for launching MCP on EC2 in AWS Global Region

Resources:
  MCPInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  MCPInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref MCPInstanceRole

  MCPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  MCPInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: Strands-workshop
      InstanceType: t3.large
      ImageId: !Sub '{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}'
      SecurityGroups:
        - !Ref MCPSecurityGroup
      IamInstanceProfile: !Ref MCPInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp3
      UserData:
        Fn::Base64: |
          #!/bin/bash
            # log
            exec > >(tee /var/log/user-data.log|logger -t user-data) 2>&1

            # update and install dependencies
            sudo apt update
            sudo apt install curl git python3 python3-pip wget unzip -y
            pip3 install boto3 awscli

            # install Docker docker-compose 
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo systemctl enable docker && sudo systemctl start docker && sudo usermod -aG docker ubuntu
            sudo chmod 666 /var/run/docker.sock
            sudo curl -SL https://github.com/docker/compose/releases/download/v2.35.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

            # clone repo
            su - ubuntu -c '
              cd ~
              git clone https://github.com/aws-samples/sample_agentic_ai_strands -b workshop
            '

            # 为ubuntu用户专门安装和配置工具
            su - ubuntu -c '
              # 安装NVM
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
              
              # 立即加载NVM配置以便在脚本中使用
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              
              # 安装Node.js
              nvm install 22.12.0
              nvm alias default 22.12.0
              
              # 安装uv
              curl -LsSf https://astral.sh/uv/install.sh | sh
              
              # 确保.cargo/bin在PATH中并能立即使用
              export PATH="$HOME/.cargo/bin:$PATH"
              source $HOME/.cargo/env
              
              # 验证安装
              echo "Node version: $(node -v)"
              echo "UV version: $(uv --version || echo \"UV not found in PATH\")"
              
              # shell config
              echo "export NVM_DIR=\"\$HOME/.nvm\"" >> $HOME/.bashrc
              echo "[ -s \"\$NVM_DIR/nvm.sh\" ] && \\. \"\$NVM_DIR/nvm.sh\"" >> $HOME/.bashrc
              echo "[ -s \"\$NVM_DIR/bash_completion\" ] && \\. \"\$NVM_DIR/bash_completion\"" >> $HOME/.bashrc
              echo "export PATH=\"\$HOME/.cargo/bin:\$PATH\"" >> $HOME/.bashrc
              echo "export PATH=\"\$(npm config get prefix)/bin:\$PATH\"" >> $HOME/.bashrc
            '
            # 安装 Rust
            chown -R ubuntu:ubuntu /home/ubuntu/.nvm /home/ubuntu/.cargo

            #  restart service
            systemctl restart code-server
            # sudo shutdown now
          
Outputs:
  InstanceId:
    Description: Instance ID of the newly created EC2 instance
    Value: !Ref MCPInstance
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt MCPInstance.PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt MCPInstance.PublicIp
